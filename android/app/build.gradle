apply plugin: "com.android.application"
apply plugin: 'com.google.gms.google-services'

// import com.android.build.OutputFile

/**
 * The react.gradle file registers a task for each build variant (e.g. bundleDebugJsAndAssets
 * and bundleReleaseJsAndAssets).
 * These basically call `react-native bundle` with the correct arguments during the Android build
 * cycle. By default, bundleDebugJsAndAssets is skipped, as in debug/dev mode we prefer to load the
 * bundle directly from the development server. Below you can see all the possible configurations
 * and their defaults. If you decide to add a configuration block, make sure to add it before the
 * `apply from: "../../node_modules/react-native/react.gradle"` line.
 */

project.ext.react = [
    bundleAssetName        : "index.android.bundle",
    entryFile              : "index.android.js",
    bundleCommand          : "ram-bundle",
    bundleInDebug          : false,
    bundleInRelease        : true,
    devDisabledInStaging   : true,
    root                   : "../../",
    jsBundleDirDebug       : "$buildDir/intermediates/assets/debug",
    jsBundleDirRelease     : "$buildDir/intermediates/assets/release",
    resourcesDirDebug      : "$buildDir/intermediates/res/merged/debug",
    resourcesDirRelease    : "$buildDir/intermediates/res/merged/release",
    inputExcludes          : ["android/**", "ios/**"],
    nodeExecutableAndArgs  : ["node"],
    extraPackagerArgs      : [],
    enableHermes           : true
]

task buildDeps(type: Exec) {
    commandLine 'bash', '../libuv/libuv-1.42.0/BASHCOMPILE.sh'
}

task copyDeps(type: Exec, dependsOn: 'buildDeps') {
    commandLine 'bash', '../libuv/libuv-1.42.0/COPY.sh'
}

task copyXMRig(type: Exec, dependsOn: 'externalNativeBuildRelease') {
    commandLine 'bash', 'src/cpp/COPY.sh'
}

task copyXMRigDebug(type: Exec, dependsOn: 'externalNativeBuildDebug') {
    commandLine 'bash', 'src/cpp/COPY_DEBUG.sh'
}

tasks.whenTaskAdded { task ->
    if (task.name == 'compileReleaseSources') {
        task.dependsOn copyXMRig
    }
    if (task.name == 'installDebug') {
        task.dependsOn copyXMRigDebug
    }
}

project.tasks.getByName('preBuild').dependsOn copyDeps

apply from: "../../node_modules/react-native/react.gradle"

def enableSeparateBuildPerCPUArchitecture = false
def enableProguardInReleaseBuilds = false
def jscFlavor = 'org.webkit:android-jsc:+'
def enableHermes = project.ext.react.get("enableHermes", true);

android {
    ndkVersion rootProject.ext.ndkVersion
    compileSdkVersion rootProject.ext.compileSdkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId "com.reactnativexmrig"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 27
        versionName "1.2.0"
        externalNativeBuild {
            cmake {
                arguments "-DUV_INCLUDE_DIR=app/src/cpp/include"
                cppFlags "-std=gnu++11"
            }
        }
    }

    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false
            include "armeabi-v7a", "x86", "arm64-v8a", "x86_64"
        }
    }

    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
        release {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
            if (project.hasProperty('MYAPP_UPLOAD_STORE_FILE')) {
                storeFile file(MYAPP_UPLOAD_STORE_FILE)
                storePassword MYAPP_UPLOAD_STORE_PASSWORD
                keyAlias MYAPP_UPLOAD_KEY_ALIAS
                keyPassword MYAPP_UPLOAD_KEY_PASSWORD
            }
        }
    }

    externalNativeBuild {
        cmake {
            path file('src/cpp/CMakeLists.txt')
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            minifyEnabled enableProguardInReleaseBuilds
            debuggable false
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def versionCodes = ["armeabi-v7a": 1, "x86": 2, "arm64-v8a": 3, "x86_64": 4]
            def abi = output.getFilter(com.android.build.OutputFile.ABI)
            if (abi != null) {
                output.versionCodeOverride = defaultConfig.versionCode * 1000 + versionCodes.get(abi)
            }
        }
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "com.facebook.react:react-native:+"  // From node_modules
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.0.0"
    implementation 'com.googlecode.json-simple:json-simple:1.1.1'
    implementation project(':react-native-splash-screen')
    implementation 'org.greenrobot:eventbus:3.2.0'

    debugImplementation("com.facebook.flipper:flipper:${FLIPPER_VERSION}") {
        exclude group: 'com.facebook.fbjni'
    }

    debugImplementation("com.facebook.flipper:flipper-network-plugin:${FLIPPER_VERSION}") {
        exclude group: 'com.facebook.flipper'
        exclude group: 'com.squareup.okhttp3', module: 'okhttp'
    }

    debugImplementation("com.facebook.flipper:flipper-fresco-plugin:${FLIPPER_VERSION}") {
        exclude group: 'com.facebook.flipper'
    }

    if (enableHermes) {
        def hermesPath = "../../node_modules/hermes-engine/android/";
        debugImplementation files(hermesPath + "hermes-debug.aar")
        releaseImplementation files(hermesPath + "hermes-release.aar")
    } else {
        implementation jscFlavor
    }

    def room_version = "2.3.0"
    implementation "androidx.room:room-runtime:$room_version"
    annotationProcessor "androidx.room:room-compiler:$room_version"

    implementation("com.squareup.okhttp3:okhttp:4.9.0")
}

configurations {
    compile.exclude group: "junit", module: "junit"
}

task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}

apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesAppBuildGradle(project)
